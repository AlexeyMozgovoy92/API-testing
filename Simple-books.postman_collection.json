{
	"info": {
		"_postman_id": "73f72771-693f-4581-88bb-1a831a3a3152",
		"name": "Simple-books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19560281"
	},
	"item": [
		{
			"name": "status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/status",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"#### тест на проверку статуса #####\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"#### парсинг в json формат и фильтрация всех nonfiction книг по наличию #### \r",
							"const response = pm.response.json();\r",
							"\r",
							"const nonFictionBooks = response.filter((book) => book.available === true);\r",
							"\r",
							"console.log(nonFictionBooks[0]);\r",
							"\r",
							"#### установить переменную #####\r",
							"pm.globals.set(\"bookID\", nonFictionBooks[0].id);\r",
							"\r",
							"\r",
							"#####тест на подтверждение наличия####\r",
							"pm.test(\"Book found\", () => {\r",
							"    pm.expect(book).to.be.an('object');\r",
							"    pm.expect(book.available).to.be.true;\r",
							"    pm.expect(book.available).to.eql(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/books?type=non-fiction",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						},
						{
							"key": "limit",
							"value": "6",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get one book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"##### тест что наличие больше чем 0#####\r",
							"const response = pm.response.json();\r",
							"pm.test(\"is in stook\", () => {\r",
							"    pm.expect(response[\"current-stock\"]).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/books/:bookId ",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"books",
						":bookId "
					],
					"variable": [
						{
							"key": "bookId ",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 3,\r\n  \"customerName\": \"allle\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/orders",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "registration",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\": \"Alex\",\r\n    \"clientEmail\": \"alex@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/api-clients",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "get orders",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\": \"Alex\",\r\n    \"clientEmail\": \"alex@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/orders",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "one order get",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\": \"Alex\",\r\n    \"clientEmail\": \"alex@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/orders/:orderId",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "JxQFQFqaf8cViFRBtdN67"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"customerName\": \"Alexa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/orders/:orderId",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "JxQFQFqaf8cViFRBtdN67"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"customerName\": \"Alexa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/orders/:orderId",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "JxQFQFqaf8cViFRBtdN67"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "---",
			"type": "string"
		}
	]
}